#!/bin/bash

set -eu
set -o pipefail

BOLD_RED_COLOR='\033[1m\033[31m'
BOLD_GREEN_COLOR='\033[1m\033[32m'
BLUE_COLOR='\033[34m'
TERMINATE_COLOR='\033[0m'

maybe_pluralize() {
    if [ "$1" == 1 ]
    then
        echo "$2"
    else
        echo "$3"
    fi
}

current_git_branch() {
    git branch | egrep '^\*' | awk '{print $2}'
}

check_remote_branch_exists() {
    { git branch -a | grep "remotes/${1}" &> /dev/null ; } && echo true || echo false
}

current_git_branch_upstream() {
    res=$(git branch -vv | egrep '^\*' | egrep -o '\[[^]]+\]' | head -n 1 | tr -d '[]:' | awk '{print $1}')
    if [ ! -z "$res" -a $(check_remote_branch_exists "$res") == true ]
    then
        echo "$res"
    elif [ $(check_remote_branch_exists 'origin/main') == true ]
    then
        echo 'origin/main'
    elif [ $(check_remote_branch_exists 'origin/master') == true ]
    then
         echo 'origin/master'
    else
        >&2 echo "Could not determine upstream in $(pwd)"
        exit 1
    fi
}

with_color() {
    if [ "$1" == 'green' ]
    then
        begin="$BOLD_GREEN_COLOR"
        end="$TERMINATE_COLOR"
    elif [ "$1" == 'red' ]
    then
        begin="$BOLD_RED_COLOR"
        end="$TERMINATE_COLOR"
    elif [ "$1" == 'blue' ]
    then
        begin="$BLUE_COLOR"
        end="$TERMINATE_COLOR"
    else
        begin=''
        end=''
    fi
    shift
    echo -e "${begin}${@}${end}"
}

colorize_lines() {
    while read -r l
    do
        with_color "$1" "$l"
    done
}

run_once() {
    if [ -d ".git" ]
    then
        cd ..
    fi

    with_color blue "Multigitstatus for $(pwd)"
    echo

    if [ "${MULTIGITSTATUS_DO_FETCH:-false}" == 'true' ]
    then
        with_color blue 'Fetching updates from Git remotes...'
        echo
    fi

    for d in $(find . -maxdepth 3 -type d -name '.git')
    do
        d=$(dirname $d)

        pushd "$d" &> /dev/null

        if [ "${MULTIGITSTATUS_DO_FETCH:-false}" == 'true' ]
        then
            git fetch -q
        fi

        status=$(git status --short)

        local_branch=$(current_git_branch)
        remote_branch=$(current_git_branch_upstream)
        behind=$(git rev-list --count "${local_branch}..remotes/${remote_branch}")
        ahead=$(git rev-list --count "remotes/${remote_branch}..${local_branch}")

        ahead_only=false
        behind_only=false
        dirty_only=false

        if [ "$status" == '' -a "$behind" == 0 -a "$ahead" == 0 ]
        then
            echo -e "$d: $(with_color green CLEAN)"
        else
            if [ "$status" == '' ]
            then
                if [ "$ahead" == 0 ]
                then
                    echo -e "$d: $(with_color red BEHIND by ${behind} $(maybe_pluralize ${behind} COMMIT COMMITS))"
                    behind_only=true
                elif [ "$behind" == 0 ]
                then
                    echo -e "$d: $(with_color red AHEAD by ${ahead} $(maybe_pluralize ${ahead} COMMIT COMMITS))"
                    ahead_only=true
                else
                    echo -e "$d: $(with_color red BEHIND by ${behind} $(maybe_pluralize ${behind} COMMIT COMMITS) and AHEAD by ${ahead} $(maybe_pluralize ${ahead} COMMIT COMMITS))"
                    ahead_only=true
                fi
            elif [ "$ahead" == 0 -a "$behind" == 0 ]
            then
                echo -e "$d: $(with_color red DIRTY WORKING TREE)"
                dirty_only=true
            else
                echo -e "$d: $(with_color red DIRTY)"
            fi

            if [ "$status" != '' ]
            then
                if [ "$dirty_only" == 'false' ]
                then
                    echo
                    with_color blue "Working tree is dirty:"
                fi
                echo "$status" | colorize_lines blue
            fi

            if [ "$behind" != '0' ]
            then
                echo
                with_color blue "Commits on ${remote_branch} but not ${local_branch}:"
                git rev-list --right-only --oneline "${local_branch}..remotes/${remote_branch}" | colorize_lines blue
            fi

            if [ "$ahead" != '0' ]
            then
                echo
                with_color blue "Commits on ${local_branch} but not ${remote_branch}:"
                git rev-list --right-only --oneline "remotes/${remote_branch}..${local_branch}" | colorize_lines blue
            fi
            echo
        fi
        popd &> /dev/null
    done
}

if [ -z "${MULTIGITSTATUS_DO_RUN:-}" ]
then
    export MULTIGITSTATUS_DO_RUN=true
    fetch_period_seconds="${MULTIGITSTATUS_FETCH_PERIOD_SECONDS:-3600}"
    sleep_seconds="${MULTIGITSTATUS_SLEEP_SECONDS:-5}"
    sub_run_out=$("$0" "$@")
    run_ct=0
    while true
    do
        run_ct=$((run_ct + 1))
        echo -e "$sub_run_out" | less -K -c -R &
        bg_pid=$!
        for i in $(seq 1 $sleep_seconds)
        do
            { ps -p $bg_pid > /dev/null; } || exit 1
            sleep 1
        done
        export MULTIGITSTATUS_DO_FETCH=$(
            test $((run_ct % (fetch_period_seconds / sleep_seconds))) = 0 \
                && echo true \
                    || echo false)
        sub_run_out=$("$0" "$@")
        kill $bg_pid
    done
else
    run_once
fi
